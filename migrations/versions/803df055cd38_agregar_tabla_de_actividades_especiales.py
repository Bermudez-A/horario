"""Agregar tabla de actividades especiales

Revision ID: 803df055cd38
Revises: aed7645b4623
Create Date: 2025-04-09 13:07:56.311374

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '803df055cd38'
down_revision = 'aed7645b4623'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Check if tables exist before creating them
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    
    # Create disponibilidad_comun table if it doesn't exist
    if 'disponibilidad_comun' not in inspector.get_table_names():
        op.create_table('disponibilidad_comun',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('dia', sa.String(length=15), nullable=False),
            sa.Column('hora', sa.String(length=10), nullable=False),
            sa.Column('titulo', sa.String(length=100), nullable=False),
            sa.Column('color', sa.String(length=20), nullable=True),
            sa.Column('icono', sa.String(length=30), nullable=True),
            sa.Column('created_at', sa.DateTime(), nullable=True),
            sa.Column('updated_at', sa.DateTime(), nullable=True),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('dia', 'hora', name='uq_disponibilidad_comun_dia_hora')
        )
    
    # Create clases_asignaturas table if it doesn't exist
    if 'clases_asignaturas' not in inspector.get_table_names():
        op.create_table('clases_asignaturas',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('clase_id', sa.Integer(), nullable=False),
            sa.Column('asignatura_id', sa.Integer(), nullable=False),
            sa.Column('horas_semanales', sa.Integer(), nullable=False),
            sa.Column('created_at', sa.DateTime(), nullable=True),
            sa.ForeignKeyConstraint(['asignatura_id'], ['asignaturas.id'], ),
            sa.ForeignKeyConstraint(['clase_id'], ['clases.id'], ),
            sa.PrimaryKeyConstraint('id')
        )
    
    # Check if actividades_especiales table exists
    if 'actividades_especiales' in inspector.get_table_names():
        # Modificar la tabla actividades_especiales
        op.add_column('actividades_especiales', sa.Column('created_at', sa.DateTime(), nullable=True))
        op.add_column('actividades_especiales', sa.Column('updated_at', sa.DateTime(), nullable=True))
        op.add_column('actividades_especiales', sa.Column('hora_new', sa.Integer(), nullable=True))
        
        # Actualizar la nueva columna con los valores convertidos
        op.execute('UPDATE actividades_especiales SET hora_new = CAST(hora AS INTEGER)')
        
        # Eliminar la columna antigua y renombrar la nueva
        op.drop_column('actividades_especiales', 'hora')
        op.alter_column('actividades_especiales', 'hora_new',
                        new_column_name='hora',
                        existing_type=sa.Integer(),
                        nullable=False)
        
        # Modificar la columna dia
        op.alter_column('actividades_especiales', 'dia',
                        existing_type=sa.VARCHAR(length=15),
                        type_=sa.String(length=10),
                        existing_nullable=False)
        
        # Eliminar las columnas que ya no se necesitan
        op.drop_column('actividades_especiales', 'fecha_creacion')
        op.drop_column('actividades_especiales', 'es_fija')
        op.drop_column('actividades_especiales', 'icono')
        op.drop_column('actividades_especiales', 'ultima_modificacion')
    else:
        # Create actividades_especiales table if it doesn't exist
        op.create_table('actividades_especiales',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('nombre', sa.String(length=100), nullable=False),
            sa.Column('descripcion', sa.String(length=255), nullable=True),
            sa.Column('dia', sa.String(length=10), nullable=False),
            sa.Column('hora', sa.Integer(), nullable=False),
            sa.Column('color', sa.String(length=7), nullable=False, server_default='#3498db'),
            sa.Column('created_at', sa.DateTime(), nullable=False, server_default=sa.text('CURRENT_TIMESTAMP')),
            sa.Column('updated_at', sa.DateTime(), nullable=False, server_default=sa.text('CURRENT_TIMESTAMP')),
            sa.PrimaryKeyConstraint('id'),
            sa.UniqueConstraint('dia', 'hora', name='uq_actividad_especial_dia_hora')
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('actividades_especiales', schema=None) as batch_op:
        batch_op.add_column(sa.Column('ultima_modificacion', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('icono', sa.VARCHAR(length=30), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('es_fija', sa.BOOLEAN(), autoincrement=False, nullable=True))
        batch_op.add_column(sa.Column('fecha_creacion', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
        batch_op.alter_column('hora',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(length=15),
               existing_nullable=False)
        batch_op.alter_column('dia',
               existing_type=sa.String(length=10),
               type_=sa.VARCHAR(length=15),
               existing_nullable=False)
        batch_op.drop_column('updated_at')
        batch_op.drop_column('created_at')

    op.drop_table('clases_asignaturas')
    op.drop_table('disponibilidad_comun')
    # ### end Alembic commands ###
